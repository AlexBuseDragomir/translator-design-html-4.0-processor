//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import tree.Node;

import java.util.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Html4Parser extends java_cup.runtime.lr_parser {

 private Node documentNode;

 public Node getDocumentNode() {
   return documentNode;
 }

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  public Html4Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Html4Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Html4Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\005\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\004" +
    "\000\002\004\005\000\002\014\005\000\002\014\004\000" +
    "\002\015\004\000\002\015\003\000\002\016\003\000\002" +
    "\016\004\000\002\016\005\000\002\005\004\000\002\005" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\007\005\000\002\007\004\000" +
    "\002\010\004\000\002\010\003\000\002\011\003\000\002" +
    "\011\004\000\002\011\003\000\002\011\004\000\002\013" +
    "\004\000\002\013\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\050\005\000\002\023\005\000\002" +
    "\017\004\000\002\017\005\000\002\020\004\000\002\020" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\005" +
    "\000\002\037\004\000\002\037\003\000\002\040\005\000" +
    "\002\033\005\000\002\034\005\000\002\035\004\000\002" +
    "\035\003\000\002\036\005\000\002\036\004\000\002\045" +
    "\004\000\002\045\003\000\002\046\003\000\002\046\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\041\005\000\002" +
    "\041\004\000\002\042\004\000\002\042\003\000\002\043" +
    "\003\000\002\043\003\000\002\055\005\000\002\055\004" +
    "\000\002\055\005\000\002\055\004\000\002\055\005\000" +
    "\002\055\004\000\002\055\005\000\002\055\004\000\002" +
    "\055\005\000\002\055\004\000\002\055\005\000\002\055" +
    "\004\000\002\047\005\000\002\047\004\000\002\047\005" +
    "\000\002\047\004\000\002\047\005\000\002\047\004\000" +
    "\002\047\005\000\002\047\004\000\002\047\005\000\002" +
    "\047\004\000\002\047\005\000\002\047\004\000\002\047" +
    "\005\000\002\047\004\000\002\044\005\000\002\044\004" +
    "\000\002\025\005\000\002\025\004\000\002\026\004\000" +
    "\002\026\003\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\003\000\002\030\005\000\002\030" +
    "\004\000\002\031\004\000\002\031\003\000\002\032\005" +
    "\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\004\004\005\001\002\000\004\002\307\001" +
    "\002\000\010\006\014\014\010\016\013\001\002\000\004" +
    "\005\uffff\001\002\000\004\005\ufffd\001\002\000\064\013" +
    "\102\015\305\023\044\032\065\050\074\051\061\053\063" +
    "\055\062\061\060\063\052\065\046\067\100\071\105\073" +
    "\101\075\055\077\070\101\111\103\110\105\107\107\106" +
    "\111\104\113\103\115\047\117\072\120\071\001\002\000" +
    "\004\005\ufffe\001\002\000\004\005\303\001\002\000\010" +
    "\017\036\020\040\021\035\001\002\000\012\006\021\007" +
    "\016\010\017\012\015\001\002\000\012\006\uffe7\007\uffe7" +
    "\010\uffe7\012\uffe7\001\002\000\004\005\uffec\001\002\000" +
    "\004\011\025\001\002\000\012\006\uffea\007\uffea\010\uffea" +
    "\012\uffea\001\002\000\012\006\uffe9\007\uffe9\010\uffe9\012" +
    "\uffe9\001\002\000\012\006\021\007\023\010\017\012\015" +
    "\001\002\000\004\005\uffed\001\002\000\012\006\uffeb\007" +
    "\uffeb\010\uffeb\012\uffeb\001\002\000\012\006\uffe8\007\uffe8" +
    "\010\uffe8\012\uffe8\001\002\000\012\006\uffe2\007\uffe2\010" +
    "\uffe2\012\uffe2\001\002\000\012\006\uffe4\007\uffe4\010\uffe4" +
    "\012\uffe4\001\002\000\012\006\uffe0\007\uffe0\010\uffe0\012" +
    "\uffe0\001\002\000\012\006\uffe6\007\uffe6\010\uffe6\012\uffe6" +
    "\001\002\000\012\006\uffe1\007\uffe1\010\uffe1\012\uffe1\001" +
    "\002\000\012\006\uffe3\007\uffe3\010\uffe3\012\uffe3\001\002" +
    "\000\012\006\uffe5\007\uffe5\010\uffe5\012\uffe5\001\002\000" +
    "\064\013\102\022\076\023\044\032\065\050\074\051\061" +
    "\053\063\055\062\061\060\063\052\065\046\067\100\071" +
    "\105\073\101\075\055\077\070\101\111\103\110\105\107" +
    "\107\106\111\104\113\103\115\047\117\072\120\071\001" +
    "\002\000\004\005\ufff9\001\002\000\010\017\ufff7\020\ufff7" +
    "\021\ufff7\001\002\000\010\017\ufff6\020\ufff6\021\ufff6\001" +
    "\002\000\010\017\042\020\040\021\035\001\002\000\004" +
    "\005\ufffa\001\002\000\010\017\ufff8\020\ufff8\021\ufff8\001" +
    "\002\000\066\013\102\024\250\025\252\026\256\032\065" +
    "\050\074\051\061\053\063\055\062\061\060\063\052\065" +
    "\046\067\100\071\105\073\101\075\055\077\261\101\111" +
    "\103\110\105\107\107\106\111\104\113\103\115\047\117" +
    "\262\120\071\001\002\000\076\013\uffda\015\uffda\022\uffda" +
    "\023\uffda\032\uffda\037\uffda\041\uffda\050\uffda\051\uffda\053" +
    "\uffda\055\uffda\060\uffda\061\uffda\063\uffda\065\uffda\067\uffda" +
    "\071\uffda\073\uffda\075\uffda\077\uffda\100\uffda\101\uffda\103" +
    "\uffda\105\uffda\107\uffda\111\uffda\113\uffda\115\uffda\117\uffda" +
    "\120\uffda\001\002\000\032\013\102\050\074\051\061\061" +
    "\060\063\052\065\046\066\245\067\100\071\105\073\101" +
    "\075\055\120\071\001\002\000\006\013\243\116\242\001" +
    "\002\000\076\013\uffd8\015\uffd8\022\uffd8\023\uffd8\032\uffd8" +
    "\037\uffd8\041\uffd8\050\uffd8\051\uffd8\053\uffd8\055\uffd8\060" +
    "\uffd8\061\uffd8\063\uffd8\065\uffd8\067\uffd8\071\uffd8\073\uffd8" +
    "\075\uffd8\077\uffd8\100\uffd8\101\uffd8\103\uffd8\105\uffd8\107" +
    "\uffd8\111\uffd8\113\uffd8\115\uffd8\117\uffd8\120\uffd8\001\002" +
    "\000\076\013\uffd7\015\uffd7\022\uffd7\023\uffd7\032\uffd7\037" +
    "\uffd7\041\uffd7\050\uffd7\051\uffd7\053\uffd7\055\uffd7\060\uffd7" +
    "\061\uffd7\063\uffd7\065\uffd7\067\uffd7\071\uffd7\073\uffd7\075" +
    "\uffd7\077\uffd7\100\uffd7\101\uffd7\103\uffd7\105\uffd7\107\uffd7" +
    "\111\uffd7\113\uffd7\115\uffd7\117\uffd7\120\uffd7\001\002\000" +
    "\032\013\102\050\074\051\061\061\060\063\052\064\237" +
    "\065\046\067\100\071\105\073\101\075\055\120\071\001" +
    "\002\000\074\013\ufff1\015\ufff1\022\ufff1\023\ufff1\032\ufff1" +
    "\037\ufff1\041\ufff1\050\ufff1\051\ufff1\053\ufff1\055\ufff1\061" +
    "\ufff1\063\ufff1\065\ufff1\067\ufff1\071\ufff1\073\ufff1\075\ufff1" +
    "\077\ufff1\100\ufff1\101\ufff1\103\ufff1\105\ufff1\107\ufff1\111" +
    "\ufff1\113\ufff1\115\ufff1\117\ufff1\120\ufff1\001\002\000\076" +
    "\013\uffdb\015\uffdb\022\uffdb\023\uffdb\032\uffdb\037\uffdb\041" +
    "\uffdb\050\uffdb\051\uffdb\053\uffdb\055\uffdb\060\uffdb\061\uffdb" +
    "\063\uffdb\065\uffdb\067\uffdb\071\uffdb\073\uffdb\075\uffdb\077" +
    "\uffdb\100\uffdb\101\uffdb\103\uffdb\105\uffdb\107\uffdb\111\uffdb" +
    "\113\uffdb\115\uffdb\117\uffdb\120\uffdb\001\002\000\006\013" +
    "\235\076\234\001\002\000\066\013\ufff2\015\ufff2\022\ufff2" +
    "\023\ufff2\032\ufff2\050\ufff2\051\ufff2\053\ufff2\055\ufff2\061" +
    "\ufff2\063\ufff2\065\ufff2\067\ufff2\071\ufff2\073\ufff2\075\ufff2" +
    "\077\ufff2\101\ufff2\103\ufff2\105\ufff2\107\ufff2\111\ufff2\113" +
    "\ufff2\115\ufff2\117\ufff2\120\ufff2\001\002\000\136\013\uffb8" +
    "\015\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\032" +
    "\uffb8\037\uffb8\041\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\055\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065" +
    "\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8" +
    "\074\uffb8\075\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103" +
    "\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8" +
    "\112\uffb8\113\uffb8\114\uffb8\115\uffb8\117\uffb8\120\uffb8\001" +
    "\002\000\032\013\102\050\074\051\061\061\060\062\231" +
    "\063\052\065\046\067\100\071\105\073\101\075\055\120" +
    "\071\001\002\000\046\013\102\050\074\051\061\052\222" +
    "\061\060\063\052\065\046\067\100\071\105\073\101\075" +
    "\055\101\111\103\110\105\107\107\106\111\104\113\103" +
    "\120\071\001\002\000\004\057\204\001\002\000\004\057" +
    "\204\001\002\000\064\013\102\022\203\023\044\032\065" +
    "\050\074\051\061\053\063\055\062\061\060\063\052\065" +
    "\046\067\100\071\105\073\101\075\055\077\070\101\111" +
    "\103\110\105\107\107\106\111\104\113\103\115\047\117" +
    "\072\120\071\001\002\000\014\033\150\034\153\042\151" +
    "\044\147\046\152\001\002\000\074\013\uffef\015\uffef\022" +
    "\uffef\023\uffef\032\uffef\037\uffef\041\uffef\050\uffef\051\uffef" +
    "\053\uffef\055\uffef\061\uffef\063\uffef\065\uffef\067\uffef\071" +
    "\uffef\073\uffef\075\uffef\077\uffef\100\uffef\101\uffef\103\uffef" +
    "\105\uffef\107\uffef\111\uffef\113\uffef\115\uffef\117\uffef\120" +
    "\uffef\001\002\000\076\013\uffd9\015\uffd9\022\uffd9\023\uffd9" +
    "\032\uffd9\037\uffd9\041\uffd9\050\uffd9\051\uffd9\053\uffd9\055" +
    "\uffd9\060\uffd9\061\uffd9\063\uffd9\065\uffd9\067\uffd9\071\uffd9" +
    "\073\uffd9\075\uffd9\077\uffd9\100\uffd9\101\uffd9\103\uffd9\105" +
    "\uffd9\107\uffd9\111\uffd9\113\uffd9\115\uffd9\117\uffd9\120\uffd9" +
    "\001\002\000\062\013\102\023\044\032\065\050\074\051" +
    "\061\053\063\055\062\061\060\063\052\065\046\067\100" +
    "\071\105\073\101\075\055\077\070\101\111\103\110\105" +
    "\107\107\106\111\104\113\103\115\047\117\072\120\071" +
    "\001\002\000\136\013\uffba\015\uffba\022\uffba\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\032\uffba\037\uffba\041\uffba\050\uffba" +
    "\051\uffba\052\uffba\053\uffba\055\uffba\060\uffba\061\uffba\062" +
    "\uffba\063\uffba\064\uffba\065\uffba\066\uffba\067\uffba\070\uffba" +
    "\071\uffba\072\uffba\073\uffba\074\uffba\075\uffba\077\uffba\100" +
    "\uffba\101\uffba\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba" +
    "\107\uffba\110\uffba\111\uffba\112\uffba\113\uffba\114\uffba\115" +
    "\uffba\117\uffba\120\uffba\001\002\000\074\013\uffee\015\uffee" +
    "\022\uffee\023\uffee\032\uffee\037\uffee\041\uffee\050\uffee\051" +
    "\uffee\053\uffee\055\uffee\061\uffee\063\uffee\065\uffee\067\uffee" +
    "\071\uffee\073\uffee\075\uffee\077\uffee\100\uffee\101\uffee\103" +
    "\uffee\105\uffee\107\uffee\111\uffee\113\uffee\115\uffee\117\uffee" +
    "\120\uffee\001\002\000\076\013\uffd6\015\uffd6\022\uffd6\023" +
    "\uffd6\032\uffd6\037\uffd6\041\uffd6\050\uffd6\051\uffd6\053\uffd6" +
    "\055\uffd6\060\uffd6\061\uffd6\063\uffd6\065\uffd6\067\uffd6\071" +
    "\uffd6\073\uffd6\075\uffd6\077\uffd6\100\uffd6\101\uffd6\103\uffd6" +
    "\105\uffd6\107\uffd6\111\uffd6\113\uffd6\115\uffd6\117\uffd6\120" +
    "\uffd6\001\002\000\136\013\uffb9\015\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\032\uffb9\037\uffb9\041\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\055\uffb9\060\uffb9\061\uffb9" +
    "\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070" +
    "\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\077\uffb9" +
    "\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\106" +
    "\uffb9\107\uffb9\110\uffb9\111\uffb9\112\uffb9\113\uffb9\114\uffb9" +
    "\115\uffb9\117\uffb9\120\uffb9\001\002\000\136\013\uffb6\015" +
    "\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\032\uffb6" +
    "\037\uffb6\041\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\055" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\066\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6\074" +
    "\uffb6\075\uffb6\077\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6" +
    "\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110\uffb6\111\uffb6\112" +
    "\uffb6\113\uffb6\114\uffb6\115\uffb6\117\uffb6\120\uffb6\001\002" +
    "\000\010\017\ufff5\020\ufff5\021\ufff5\001\002\000\074\013" +
    "\ufff0\015\ufff0\022\ufff0\023\ufff0\032\ufff0\037\ufff0\041\ufff0" +
    "\050\ufff0\051\ufff0\053\ufff0\055\ufff0\061\ufff0\063\ufff0\065" +
    "\ufff0\067\ufff0\071\ufff0\073\ufff0\075\ufff0\077\ufff0\100\ufff0" +
    "\101\ufff0\103\ufff0\105\ufff0\107\ufff0\111\ufff0\113\ufff0\115" +
    "\ufff0\117\ufff0\120\ufff0\001\002\000\032\013\102\050\074" +
    "\051\061\061\060\063\052\065\046\067\100\070\142\071" +
    "\105\073\101\075\055\120\071\001\002\000\032\013\102" +
    "\050\074\051\061\061\060\063\052\065\046\067\100\071" +
    "\105\073\101\074\140\075\055\120\071\001\002\000\136" +
    "\013\uffb7\015\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\032\uffb7\037\uffb7\041\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\055\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064" +
    "\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7" +
    "\073\uffb7\074\uffb7\075\uffb7\077\uffb7\100\uffb7\101\uffb7\102" +
    "\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7" +
    "\111\uffb7\112\uffb7\113\uffb7\114\uffb7\115\uffb7\117\uffb7\120" +
    "\uffb7\001\002\000\032\013\102\050\074\051\061\061\060" +
    "\063\052\065\046\067\100\071\105\073\101\075\055\114" +
    "\134\120\071\001\002\000\032\013\102\050\074\051\061" +
    "\061\060\063\052\065\046\067\100\071\105\073\101\075" +
    "\055\112\131\120\071\001\002\000\032\013\102\050\074" +
    "\051\061\061\060\063\052\065\046\067\100\071\105\072" +
    "\126\073\101\075\055\120\071\001\002\000\032\013\102" +
    "\050\074\051\061\061\060\063\052\065\046\067\100\071" +
    "\105\073\101\075\055\110\123\120\071\001\002\000\032" +
    "\013\102\050\074\051\061\061\060\063\052\065\046\067" +
    "\100\071\105\073\101\075\055\106\120\120\071\001\002" +
    "\000\032\013\102\050\074\051\061\061\060\063\052\065" +
    "\046\067\100\071\105\073\101\075\055\104\115\120\071" +
    "\001\002\000\032\013\102\050\074\051\061\061\060\063" +
    "\052\065\046\067\100\071\105\073\101\075\055\102\112" +
    "\120\071\001\002\000\104\013\uffae\015\uffae\022\uffae\023" +
    "\uffae\024\uffae\025\uffae\026\uffae\032\uffae\037\uffae\041\uffae" +
    "\050\uffae\051\uffae\052\uffae\053\uffae\055\uffae\061\uffae\063" +
    "\uffae\065\uffae\067\uffae\071\uffae\073\uffae\075\uffae\077\uffae" +
    "\100\uffae\101\uffae\103\uffae\105\uffae\107\uffae\111\uffae\113" +
    "\uffae\115\uffae\117\uffae\120\uffae\001\002\000\004\102\114" +
    "\001\002\000\104\013\uffaf\015\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\032\uffaf\037\uffaf\041\uffaf\050\uffaf" +
    "\051\uffaf\052\uffaf\053\uffaf\055\uffaf\061\uffaf\063\uffaf\065" +
    "\uffaf\067\uffaf\071\uffaf\073\uffaf\075\uffaf\077\uffaf\100\uffaf" +
    "\101\uffaf\103\uffaf\105\uffaf\107\uffaf\111\uffaf\113\uffaf\115" +
    "\uffaf\117\uffaf\120\uffaf\001\002\000\104\013\uffac\015\uffac" +
    "\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\032\uffac\037" +
    "\uffac\041\uffac\050\uffac\051\uffac\052\uffac\053\uffac\055\uffac" +
    "\061\uffac\063\uffac\065\uffac\067\uffac\071\uffac\073\uffac\075" +
    "\uffac\077\uffac\100\uffac\101\uffac\103\uffac\105\uffac\107\uffac" +
    "\111\uffac\113\uffac\115\uffac\117\uffac\120\uffac\001\002\000" +
    "\004\104\117\001\002\000\104\013\uffad\015\uffad\022\uffad" +
    "\023\uffad\024\uffad\025\uffad\026\uffad\032\uffad\037\uffad\041" +
    "\uffad\050\uffad\051\uffad\052\uffad\053\uffad\055\uffad\061\uffad" +
    "\063\uffad\065\uffad\067\uffad\071\uffad\073\uffad\075\uffad\077" +
    "\uffad\100\uffad\101\uffad\103\uffad\105\uffad\107\uffad\111\uffad" +
    "\113\uffad\115\uffad\117\uffad\120\uffad\001\002\000\104\013" +
    "\uffaa\015\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa" +
    "\032\uffaa\037\uffaa\041\uffaa\050\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\055\uffaa\061\uffaa\063\uffaa\065\uffaa\067\uffaa\071\uffaa" +
    "\073\uffaa\075\uffaa\077\uffaa\100\uffaa\101\uffaa\103\uffaa\105" +
    "\uffaa\107\uffaa\111\uffaa\113\uffaa\115\uffaa\117\uffaa\120\uffaa" +
    "\001\002\000\004\106\122\001\002\000\104\013\uffab\015" +
    "\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\032\uffab" +
    "\037\uffab\041\uffab\050\uffab\051\uffab\052\uffab\053\uffab\055" +
    "\uffab\061\uffab\063\uffab\065\uffab\067\uffab\071\uffab\073\uffab" +
    "\075\uffab\077\uffab\100\uffab\101\uffab\103\uffab\105\uffab\107" +
    "\uffab\111\uffab\113\uffab\115\uffab\117\uffab\120\uffab\001\002" +
    "\000\104\013\uffa8\015\uffa8\022\uffa8\023\uffa8\024\uffa8\025" +
    "\uffa8\026\uffa8\032\uffa8\037\uffa8\041\uffa8\050\uffa8\051\uffa8" +
    "\052\uffa8\053\uffa8\055\uffa8\061\uffa8\063\uffa8\065\uffa8\067" +
    "\uffa8\071\uffa8\073\uffa8\075\uffa8\077\uffa8\100\uffa8\101\uffa8" +
    "\103\uffa8\105\uffa8\107\uffa8\111\uffa8\113\uffa8\115\uffa8\117" +
    "\uffa8\120\uffa8\001\002\000\004\110\125\001\002\000\104" +
    "\013\uffa9\015\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026" +
    "\uffa9\032\uffa9\037\uffa9\041\uffa9\050\uffa9\051\uffa9\052\uffa9" +
    "\053\uffa9\055\uffa9\061\uffa9\063\uffa9\065\uffa9\067\uffa9\071" +
    "\uffa9\073\uffa9\075\uffa9\077\uffa9\100\uffa9\101\uffa9\103\uffa9" +
    "\105\uffa9\107\uffa9\111\uffa9\113\uffa9\115\uffa9\117\uffa9\120" +
    "\uffa9\001\002\000\136\013\uff98\015\uff98\022\uff98\023\uff98" +
    "\024\uff98\025\uff98\026\uff98\032\uff98\037\uff98\041\uff98\050" +
    "\uff98\051\uff98\052\uff98\053\uff98\055\uff98\060\uff98\061\uff98" +
    "\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070" +
    "\uff98\071\uff98\072\uff98\073\uff98\074\uff98\075\uff98\077\uff98" +
    "\100\uff98\101\uff98\102\uff98\103\uff98\104\uff98\105\uff98\106" +
    "\uff98\107\uff98\110\uff98\111\uff98\112\uff98\113\uff98\114\uff98" +
    "\115\uff98\117\uff98\120\uff98\001\002\000\004\072\130\001" +
    "\002\000\136\013\uff99\015\uff99\022\uff99\023\uff99\024\uff99" +
    "\025\uff99\026\uff99\032\uff99\037\uff99\041\uff99\050\uff99\051" +
    "\uff99\052\uff99\053\uff99\055\uff99\060\uff99\061\uff99\062\uff99" +
    "\063\uff99\064\uff99\065\uff99\066\uff99\067\uff99\070\uff99\071" +
    "\uff99\072\uff99\073\uff99\074\uff99\075\uff99\077\uff99\100\uff99" +
    "\101\uff99\102\uff99\103\uff99\104\uff99\105\uff99\106\uff99\107" +
    "\uff99\110\uff99\111\uff99\112\uff99\113\uff99\114\uff99\115\uff99" +
    "\117\uff99\120\uff99\001\002\000\104\013\uffa6\015\uffa6\022" +
    "\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\032\uffa6\037\uffa6" +
    "\041\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\055\uffa6\061" +
    "\uffa6\063\uffa6\065\uffa6\067\uffa6\071\uffa6\073\uffa6\075\uffa6" +
    "\077\uffa6\100\uffa6\101\uffa6\103\uffa6\105\uffa6\107\uffa6\111" +
    "\uffa6\113\uffa6\115\uffa6\117\uffa6\120\uffa6\001\002\000\004" +
    "\112\133\001\002\000\104\013\uffa7\015\uffa7\022\uffa7\023" +
    "\uffa7\024\uffa7\025\uffa7\026\uffa7\032\uffa7\037\uffa7\041\uffa7" +
    "\050\uffa7\051\uffa7\052\uffa7\053\uffa7\055\uffa7\061\uffa7\063" +
    "\uffa7\065\uffa7\067\uffa7\071\uffa7\073\uffa7\075\uffa7\077\uffa7" +
    "\100\uffa7\101\uffa7\103\uffa7\105\uffa7\107\uffa7\111\uffa7\113" +
    "\uffa7\115\uffa7\117\uffa7\120\uffa7\001\002\000\104\013\uffa4" +
    "\015\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\032" +
    "\uffa4\037\uffa4\041\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4" +
    "\055\uffa4\061\uffa4\063\uffa4\065\uffa4\067\uffa4\071\uffa4\073" +
    "\uffa4\075\uffa4\077\uffa4\100\uffa4\101\uffa4\103\uffa4\105\uffa4" +
    "\107\uffa4\111\uffa4\113\uffa4\115\uffa4\117\uffa4\120\uffa4\001" +
    "\002\000\004\114\136\001\002\000\104\013\uffa5\015\uffa5" +
    "\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\032\uffa5\037" +
    "\uffa5\041\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\055\uffa5" +
    "\061\uffa5\063\uffa5\065\uffa5\067\uffa5\071\uffa5\073\uffa5\075" +
    "\uffa5\077\uffa5\100\uffa5\101\uffa5\103\uffa5\105\uffa5\107\uffa5" +
    "\111\uffa5\113\uffa5\115\uffa5\117\uffa5\120\uffa5\001\002\000" +
    "\004\074\141\001\002\000\136\013\uff9a\015\uff9a\022\uff9a" +
    "\023\uff9a\024\uff9a\025\uff9a\026\uff9a\032\uff9a\037\uff9a\041" +
    "\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\055\uff9a\060\uff9a" +
    "\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067" +
    "\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a" +
    "\077\uff9a\100\uff9a\101\uff9a\102\uff9a\103\uff9a\104\uff9a\105" +
    "\uff9a\106\uff9a\107\uff9a\110\uff9a\111\uff9a\112\uff9a\113\uff9a" +
    "\114\uff9a\115\uff9a\117\uff9a\120\uff9a\001\002\000\136\013" +
    "\uff9b\015\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b" +
    "\032\uff9b\037\uff9b\041\uff9b\050\uff9b\051\uff9b\052\uff9b\053" +
    "\uff9b\055\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b" +
    "\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073" +
    "\uff9b\074\uff9b\075\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b" +
    "\103\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b\111" +
    "\uff9b\112\uff9b\113\uff9b\114\uff9b\115\uff9b\117\uff9b\120\uff9b" +
    "\001\002\000\136\013\uff9c\015\uff9c\022\uff9c\023\uff9c\024" +
    "\uff9c\025\uff9c\026\uff9c\032\uff9c\037\uff9c\041\uff9c\050\uff9c" +
    "\051\uff9c\052\uff9c\053\uff9c\055\uff9c\060\uff9c\061\uff9c\062" +
    "\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c" +
    "\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\077\uff9c\100" +
    "\uff9c\101\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c\106\uff9c" +
    "\107\uff9c\110\uff9c\111\uff9c\112\uff9c\113\uff9c\114\uff9c\115" +
    "\uff9c\117\uff9c\120\uff9c\001\002\000\004\070\144\001\002" +
    "\000\136\013\uff9d\015\uff9d\022\uff9d\023\uff9d\024\uff9d\025" +
    "\uff9d\026\uff9d\032\uff9d\037\uff9d\041\uff9d\050\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\055\uff9d\060\uff9d\061\uff9d\062\uff9d\063" +
    "\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d\071\uff9d" +
    "\072\uff9d\073\uff9d\074\uff9d\075\uff9d\077\uff9d\100\uff9d\101" +
    "\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d\106\uff9d\107\uff9d" +
    "\110\uff9d\111\uff9d\112\uff9d\113\uff9d\114\uff9d\115\uff9d\117" +
    "\uff9d\120\uff9d\001\002\000\004\100\146\001\002\000\076" +
    "\013\uffd0\015\uffd0\022\uffd0\023\uffd0\032\uffd0\037\uffd0\041" +
    "\uffd0\050\uffd0\051\uffd0\053\uffd0\055\uffd0\060\uffd0\061\uffd0" +
    "\063\uffd0\065\uffd0\067\uffd0\071\uffd0\073\uffd0\075\uffd0\077" +
    "\uffd0\100\uffd0\101\uffd0\103\uffd0\105\uffd0\107\uffd0\111\uffd0" +
    "\113\uffd0\115\uffd0\117\uffd0\120\uffd0\001\002\000\012\034" +
    "\153\042\151\044\147\046\152\001\002\000\104\013\uff92" +
    "\015\uff92\022\uff92\023\uff92\024\uff92\025\uff92\026\uff92\032" +
    "\uff92\037\uff92\041\uff92\050\uff92\051\uff92\053\uff92\055\uff92" +
    "\060\uff92\061\uff92\063\uff92\065\uff92\067\uff92\071\uff92\073" +
    "\uff92\075\uff92\077\uff92\100\uff92\101\uff92\103\uff92\105\uff92" +
    "\107\uff92\111\uff92\113\uff92\115\uff92\117\uff92\120\uff92\001" +
    "\002\000\012\034\153\042\151\044\147\046\152\001\002" +
    "\000\012\034\153\042\151\044\147\046\152\001\002\000" +
    "\010\035\163\036\164\040\161\001\002\000\022\033\uff90" +
    "\034\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047" +
    "\uff90\001\002\000\022\033\uff8c\034\uff8c\042\uff8c\043\uff8c" +
    "\044\uff8c\045\uff8c\046\uff8c\047\uff8c\001\002\000\014\033" +
    "\157\034\153\042\151\044\147\046\152\001\002\000\104" +
    "\013\uff93\015\uff93\022\uff93\023\uff93\024\uff93\025\uff93\026" +
    "\uff93\032\uff93\037\uff93\041\uff93\050\uff93\051\uff93\053\uff93" +
    "\055\uff93\060\uff93\061\uff93\063\uff93\065\uff93\067\uff93\071" +
    "\uff93\073\uff93\075\uff93\077\uff93\100\uff93\101\uff93\103\uff93" +
    "\105\uff93\107\uff93\111\uff93\113\uff93\115\uff93\117\uff93\120" +
    "\uff93\001\002\000\022\033\uff91\034\uff91\042\uff91\043\uff91" +
    "\044\uff91\045\uff91\046\uff91\047\uff91\001\002\000\062\013" +
    "\102\023\044\032\065\050\074\051\061\053\063\055\062" +
    "\061\060\063\052\065\046\067\100\071\105\073\101\075" +
    "\055\077\070\101\111\103\110\105\107\107\106\111\104" +
    "\113\103\115\047\117\072\120\071\001\002\000\010\035" +
    "\170\036\164\040\161\001\002\000\022\033\uff8a\034\uff8a" +
    "\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\001" +
    "\002\000\062\013\102\023\044\032\065\050\074\051\061" +
    "\053\063\055\062\061\060\063\052\065\046\067\100\071" +
    "\105\073\101\075\055\077\070\101\111\103\110\105\107" +
    "\107\106\111\104\113\103\115\047\117\072\120\071\001" +
    "\002\000\010\035\uff88\036\uff88\040\uff88\001\002\000\004" +
    "\037\167\001\002\000\010\035\uff86\036\uff86\040\uff86\001" +
    "\002\000\022\033\uff8b\034\uff8b\042\uff8b\043\uff8b\044\uff8b" +
    "\045\uff8b\046\uff8b\047\uff8b\001\002\000\010\035\uff89\036" +
    "\uff89\040\uff89\001\002\000\004\041\173\001\002\000\010" +
    "\035\uff87\036\uff87\040\uff87\001\002\000\014\034\153\042" +
    "\151\044\147\046\152\047\175\001\002\000\022\033\uff8d" +
    "\034\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047" +
    "\uff8d\001\002\000\014\034\153\042\151\043\177\044\147" +
    "\046\152\001\002\000\022\033\uff8e\034\uff8e\042\uff8e\043" +
    "\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\001\002\000\014" +
    "\034\153\042\151\044\147\045\201\046\152\001\002\000" +
    "\022\033\uff8f\034\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f" +
    "\046\uff8f\047\uff8f\001\002\000\066\013\ufff3\015\ufff3\022" +
    "\ufff3\023\ufff3\032\ufff3\050\ufff3\051\ufff3\053\ufff3\055\ufff3" +
    "\061\ufff3\063\ufff3\065\ufff3\067\ufff3\071\ufff3\073\ufff3\075" +
    "\ufff3\077\ufff3\101\ufff3\103\ufff3\105\ufff3\107\ufff3\111\ufff3" +
    "\113\ufff3\115\ufff3\117\ufff3\120\ufff3\001\002\000\010\017" +
    "\ufff4\020\ufff4\021\ufff4\001\002\000\046\013\102\023\044" +
    "\032\065\050\074\051\061\053\063\055\062\060\213\061" +
    "\060\063\052\065\046\067\100\071\105\073\101\075\055" +
    "\077\070\115\047\120\071\001\002\000\006\054\207\057" +
    "\204\001\002\000\010\054\uffc1\056\uffc1\057\uffc1\001\002" +
    "\000\104\013\uffc3\015\uffc3\022\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\032\uffc3\037\uffc3\041\uffc3\050\uffc3\051\uffc3" +
    "\053\uffc3\055\uffc3\060\uffc3\061\uffc3\063\uffc3\065\uffc3\067" +
    "\uffc3\071\uffc3\073\uffc3\075\uffc3\077\uffc3\100\uffc3\101\uffc3" +
    "\103\uffc3\105\uffc3\107\uffc3\111\uffc3\113\uffc3\115\uffc3\117" +
    "\uffc3\120\uffc3\001\002\000\010\054\uffc2\056\uffc2\057\uffc2" +
    "\001\002\000\046\013\uffbd\023\uffbd\032\uffbd\050\uffbd\051" +
    "\uffbd\053\uffbd\055\uffbd\060\uffbd\061\uffbd\063\uffbd\065\uffbd" +
    "\067\uffbd\071\uffbd\073\uffbd\075\uffbd\077\uffbd\115\uffbd\120" +
    "\uffbd\001\002\000\046\013\uffbc\023\uffbc\032\uffbc\050\uffbc" +
    "\051\uffbc\053\uffbc\055\uffbc\060\uffbc\061\uffbc\063\uffbc\065" +
    "\uffbc\067\uffbc\071\uffbc\073\uffbc\075\uffbc\077\uffbc\115\uffbc" +
    "\120\uffbc\001\002\000\010\054\uffbf\056\uffbf\057\uffbf\001" +
    "\002\000\046\013\102\023\044\032\065\050\074\051\061" +
    "\053\063\055\062\060\217\061\060\063\052\065\046\067" +
    "\100\071\105\073\101\075\055\077\070\115\047\120\071" +
    "\001\002\000\046\013\uffbb\023\uffbb\032\uffbb\050\uffbb\051" +
    "\uffbb\053\uffbb\055\uffbb\060\uffbb\061\uffbb\063\uffbb\065\uffbb" +
    "\067\uffbb\071\uffbb\073\uffbb\075\uffbb\077\uffbb\115\uffbb\120" +
    "\uffbb\001\002\000\046\013\uffbe\023\uffbe\032\uffbe\050\uffbe" +
    "\051\uffbe\053\uffbe\055\uffbe\060\uffbe\061\uffbe\063\uffbe\065" +
    "\uffbe\067\uffbe\071\uffbe\073\uffbe\075\uffbe\077\uffbe\115\uffbe" +
    "\120\uffbe\001\002\000\010\054\uffc0\056\uffc0\057\uffc0\001" +
    "\002\000\006\056\221\057\204\001\002\000\104\013\uffc4" +
    "\015\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\032" +
    "\uffc4\037\uffc4\041\uffc4\050\uffc4\051\uffc4\053\uffc4\055\uffc4" +
    "\060\uffc4\061\uffc4\063\uffc4\065\uffc4\067\uffc4\071\uffc4\073" +
    "\uffc4\075\uffc4\077\uffc4\100\uffc4\101\uffc4\103\uffc4\105\uffc4" +
    "\107\uffc4\111\uffc4\113\uffc4\115\uffc4\117\uffc4\120\uffc4\001" +
    "\002\000\136\013\uffb4\015\uffb4\022\uffb4\023\uffb4\024\uffb4" +
    "\025\uffb4\026\uffb4\032\uffb4\037\uffb4\041\uffb4\050\uffb4\051" +
    "\uffb4\052\uffb4\053\uffb4\055\uffb4\060\uffb4\061\uffb4\062\uffb4" +
    "\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\071" +
    "\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\077\uffb4\100\uffb4" +
    "\101\uffb4\102\uffb4\103\uffb4\104\uffb4\105\uffb4\106\uffb4\107" +
    "\uffb4\110\uffb4\111\uffb4\112\uffb4\113\uffb4\114\uffb4\115\uffb4" +
    "\117\uffb4\120\uffb4\001\002\000\046\013\102\050\074\051" +
    "\061\052\227\061\060\063\052\065\046\067\100\071\105" +
    "\073\101\075\055\101\111\103\110\105\107\107\106\111" +
    "\104\113\103\120\071\001\002\000\046\013\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\061\uffb1\063\uffb1\065\uffb1\067\uffb1\071" +
    "\uffb1\073\uffb1\075\uffb1\101\uffb1\103\uffb1\105\uffb1\107\uffb1" +
    "\111\uffb1\113\uffb1\120\uffb1\001\002\000\046\013\uffb2\050" +
    "\uffb2\051\uffb2\052\uffb2\061\uffb2\063\uffb2\065\uffb2\067\uffb2" +
    "\071\uffb2\073\uffb2\075\uffb2\101\uffb2\103\uffb2\105\uffb2\107" +
    "\uffb2\111\uffb2\113\uffb2\120\uffb2\001\002\000\046\013\uffb0" +
    "\050\uffb0\051\uffb0\052\uffb0\061\uffb0\063\uffb0\065\uffb0\067" +
    "\uffb0\071\uffb0\073\uffb0\075\uffb0\101\uffb0\103\uffb0\105\uffb0" +
    "\107\uffb0\111\uffb0\113\uffb0\120\uffb0\001\002\000\136\013" +
    "\uffb5\015\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\032\uffb5\037\uffb5\041\uffb5\050\uffb5\051\uffb5\052\uffb5\053" +
    "\uffb5\055\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5" +
    "\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073" +
    "\uffb5\074\uffb5\075\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5" +
    "\103\uffb5\104\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111" +
    "\uffb5\112\uffb5\113\uffb5\114\uffb5\115\uffb5\117\uffb5\120\uffb5" +
    "\001\002\000\046\013\uffb3\050\uffb3\051\uffb3\052\uffb3\061" +
    "\uffb3\063\uffb3\065\uffb3\067\uffb3\071\uffb3\073\uffb3\075\uffb3" +
    "\101\uffb3\103\uffb3\105\uffb3\107\uffb3\111\uffb3\113\uffb3\120" +
    "\uffb3\001\002\000\136\013\uffa2\015\uffa2\022\uffa2\023\uffa2" +
    "\024\uffa2\025\uffa2\026\uffa2\032\uffa2\037\uffa2\041\uffa2\050" +
    "\uffa2\051\uffa2\052\uffa2\053\uffa2\055\uffa2\060\uffa2\061\uffa2" +
    "\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070" +
    "\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\077\uffa2" +
    "\100\uffa2\101\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\106" +
    "\uffa2\107\uffa2\110\uffa2\111\uffa2\112\uffa2\113\uffa2\114\uffa2" +
    "\115\uffa2\117\uffa2\120\uffa2\001\002\000\004\062\233\001" +
    "\002\000\136\013\uffa3\015\uffa3\022\uffa3\023\uffa3\024\uffa3" +
    "\025\uffa3\026\uffa3\032\uffa3\037\uffa3\041\uffa3\050\uffa3\051" +
    "\uffa3\052\uffa3\053\uffa3\055\uffa3\060\uffa3\061\uffa3\062\uffa3" +
    "\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071" +
    "\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\077\uffa3\100\uffa3" +
    "\101\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3\106\uffa3\107" +
    "\uffa3\110\uffa3\111\uffa3\112\uffa3\113\uffa3\114\uffa3\115\uffa3" +
    "\117\uffa3\120\uffa3\001\002\000\136\013\uff96\015\uff96\022" +
    "\uff96\023\uff96\024\uff96\025\uff96\026\uff96\032\uff96\037\uff96" +
    "\041\uff96\050\uff96\051\uff96\052\uff96\053\uff96\055\uff96\060" +
    "\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96\066\uff96" +
    "\067\uff96\070\uff96\071\uff96\072\uff96\073\uff96\074\uff96\075" +
    "\uff96\077\uff96\100\uff96\101\uff96\102\uff96\103\uff96\104\uff96" +
    "\105\uff96\106\uff96\107\uff96\110\uff96\111\uff96\112\uff96\113" +
    "\uff96\114\uff96\115\uff96\117\uff96\120\uff96\001\002\000\004" +
    "\076\236\001\002\000\136\013\uff97\015\uff97\022\uff97\023" +
    "\uff97\024\uff97\025\uff97\026\uff97\032\uff97\037\uff97\041\uff97" +
    "\050\uff97\051\uff97\052\uff97\053\uff97\055\uff97\060\uff97\061" +
    "\uff97\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97\067\uff97" +
    "\070\uff97\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97\077" +
    "\uff97\100\uff97\101\uff97\102\uff97\103\uff97\104\uff97\105\uff97" +
    "\106\uff97\107\uff97\110\uff97\111\uff97\112\uff97\113\uff97\114" +
    "\uff97\115\uff97\117\uff97\120\uff97\001\002\000\136\013\uffa0" +
    "\015\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\032" +
    "\uffa0\037\uffa0\041\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0" +
    "\055\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065" +
    "\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0" +
    "\074\uffa0\075\uffa0\077\uffa0\100\uffa0\101\uffa0\102\uffa0\103" +
    "\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0\110\uffa0\111\uffa0" +
    "\112\uffa0\113\uffa0\114\uffa0\115\uffa0\117\uffa0\120\uffa0\001" +
    "\002\000\004\064\241\001\002\000\136\013\uffa1\015\uffa1" +
    "\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\032\uffa1\037" +
    "\uffa1\041\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\055\uffa1" +
    "\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\066" +
    "\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1" +
    "\075\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1\104" +
    "\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1\111\uffa1\112\uffa1" +
    "\113\uffa1\114\uffa1\115\uffa1\117\uffa1\120\uffa1\001\002\000" +
    "\104\013\uff94\015\uff94\022\uff94\023\uff94\024\uff94\025\uff94" +
    "\026\uff94\032\uff94\037\uff94\041\uff94\050\uff94\051\uff94\053" +
    "\uff94\055\uff94\060\uff94\061\uff94\063\uff94\065\uff94\067\uff94" +
    "\071\uff94\073\uff94\075\uff94\077\uff94\100\uff94\101\uff94\103" +
    "\uff94\105\uff94\107\uff94\111\uff94\113\uff94\115\uff94\117\uff94" +
    "\120\uff94\001\002\000\004\116\244\001\002\000\104\013" +
    "\uff95\015\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95" +
    "\032\uff95\037\uff95\041\uff95\050\uff95\051\uff95\053\uff95\055" +
    "\uff95\060\uff95\061\uff95\063\uff95\065\uff95\067\uff95\071\uff95" +
    "\073\uff95\075\uff95\077\uff95\100\uff95\101\uff95\103\uff95\105" +
    "\uff95\107\uff95\111\uff95\113\uff95\115\uff95\117\uff95\120\uff95" +
    "\001\002\000\136\013\uff9e\015\uff9e\022\uff9e\023\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\032\uff9e\037\uff9e\041\uff9e\050\uff9e" +
    "\051\uff9e\052\uff9e\053\uff9e\055\uff9e\060\uff9e\061\uff9e\062" +
    "\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e" +
    "\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\077\uff9e\100" +
    "\uff9e\101\uff9e\102\uff9e\103\uff9e\104\uff9e\105\uff9e\106\uff9e" +
    "\107\uff9e\110\uff9e\111\uff9e\112\uff9e\113\uff9e\114\uff9e\115" +
    "\uff9e\117\uff9e\120\uff9e\001\002\000\004\066\247\001\002" +
    "\000\136\013\uff9f\015\uff9f\022\uff9f\023\uff9f\024\uff9f\025" +
    "\uff9f\026\uff9f\032\uff9f\037\uff9f\041\uff9f\050\uff9f\051\uff9f" +
    "\052\uff9f\053\uff9f\055\uff9f\060\uff9f\061\uff9f\062\uff9f\063" +
    "\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f" +
    "\072\uff9f\073\uff9f\074\uff9f\075\uff9f\077\uff9f\100\uff9f\101" +
    "\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f" +
    "\110\uff9f\111\uff9f\112\uff9f\113\uff9f\114\uff9f\115\uff9f\117" +
    "\uff9f\120\uff9f\001\002\000\076\013\uffce\015\uffce\022\uffce" +
    "\023\uffce\032\uffce\037\uffce\041\uffce\050\uffce\051\uffce\053" +
    "\uffce\055\uffce\060\uffce\061\uffce\063\uffce\065\uffce\067\uffce" +
    "\071\uffce\073\uffce\075\uffce\077\uffce\100\uffce\101\uffce\103" +
    "\uffce\105\uffce\107\uffce\111\uffce\113\uffce\115\uffce\117\uffce" +
    "\120\uffce\001\002\000\066\013\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\032\uffc9\050\uffc9\051\uffc9\053\uffc9\055\uffc9\061\uffc9" +
    "\063\uffc9\065\uffc9\067\uffc9\071\uffc9\073\uffc9\075\uffc9\077" +
    "\uffc9\101\uffc9\103\uffc9\105\uffc9\107\uffc9\111\uffc9\113\uffc9" +
    "\115\uffc9\117\uffc9\120\uffc9\001\002\000\066\013\uffca\024" +
    "\uffca\025\uffca\026\uffca\032\uffca\050\uffca\051\uffca\053\uffca" +
    "\055\uffca\061\uffca\063\uffca\065\uffca\067\uffca\071\uffca\073" +
    "\uffca\075\uffca\077\uffca\101\uffca\103\uffca\105\uffca\107\uffca" +
    "\111\uffca\113\uffca\115\uffca\117\uffca\120\uffca\001\002\000" +
    "\070\013\uffd3\024\uffd3\025\uffd3\026\uffd3\032\uffd3\050\uffd3" +
    "\051\uffd3\053\uffd3\055\uffd3\061\uffd3\063\uffd3\065\uffd3\067" +
    "\uffd3\071\uffd3\073\uffd3\075\uffd3\077\uffd3\100\uffd3\101\uffd3" +
    "\103\uffd3\105\uffd3\107\uffd3\111\uffd3\113\uffd3\115\uffd3\117" +
    "\uffd3\120\uffd3\001\002\000\070\013\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\032\uffd2\050\uffd2\051\uffd2\053\uffd2\055\uffd2\061" +
    "\uffd2\063\uffd2\065\uffd2\067\uffd2\071\uffd2\073\uffd2\075\uffd2" +
    "\077\uffd2\100\uffd2\101\uffd2\103\uffd2\105\uffd2\107\uffd2\111" +
    "\uffd2\113\uffd2\115\uffd2\117\uffd2\120\uffd2\001\002\000\066" +
    "\013\uffcb\024\uffcb\025\uffcb\026\uffcb\032\uffcb\050\uffcb\051" +
    "\uffcb\053\uffcb\055\uffcb\061\uffcb\063\uffcb\065\uffcb\067\uffcb" +
    "\071\uffcb\073\uffcb\075\uffcb\077\uffcb\101\uffcb\103\uffcb\105" +
    "\uffcb\107\uffcb\111\uffcb\113\uffcb\115\uffcb\117\uffcb\120\uffcb" +
    "\001\002\000\004\030\275\001\002\000\070\013\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\032\uffdd\050\uffdd\051\uffdd\053\uffdd" +
    "\055\uffdd\061\uffdd\063\uffdd\065\uffdd\067\uffdd\071\uffdd\073" +
    "\uffdd\075\uffdd\077\uffdd\100\uffdd\101\uffdd\103\uffdd\105\uffdd" +
    "\107\uffdd\111\uffdd\113\uffdd\115\uffdd\117\uffdd\120\uffdd\001" +
    "\002\000\070\013\uffd4\024\uffd4\025\uffd4\026\uffd4\032\uffd4" +
    "\050\uffd4\051\uffd4\053\uffd4\055\uffd4\061\uffd4\063\uffd4\065" +
    "\uffd4\067\uffd4\071\uffd4\073\uffd4\075\uffd4\077\uffd4\100\uffd4" +
    "\101\uffd4\103\uffd4\105\uffd4\107\uffd4\111\uffd4\113\uffd4\115" +
    "\uffd4\117\uffd4\120\uffd4\001\002\000\060\013\102\032\065" +
    "\050\074\051\061\053\063\055\062\061\060\063\052\065" +
    "\046\067\100\071\105\073\101\075\055\077\261\101\111" +
    "\103\110\105\107\107\106\111\104\113\103\115\047\117" +
    "\262\120\071\001\002\000\070\013\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\032\uffdc\050\uffdc\051\uffdc\053\uffdc\055\uffdc\061" +
    "\uffdc\063\uffdc\065\uffdc\067\uffdc\071\uffdc\073\uffdc\075\uffdc" +
    "\077\uffdc\100\uffdc\101\uffdc\103\uffdc\105\uffdc\107\uffdc\111" +
    "\uffdc\113\uffdc\115\uffdc\117\uffdc\120\uffdc\001\002\000\070" +
    "\013\uffd1\024\uffd1\025\uffd1\026\uffd1\032\uffd1\050\uffd1\051" +
    "\uffd1\053\uffd1\055\uffd1\061\uffd1\063\uffd1\065\uffd1\067\uffd1" +
    "\071\uffd1\073\uffd1\075\uffd1\077\uffd1\100\uffd1\101\uffd1\103" +
    "\uffd1\105\uffd1\107\uffd1\111\uffd1\113\uffd1\115\uffd1\117\uffd1" +
    "\120\uffd1\001\002\000\070\013\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\032\uffd5\050\uffd5\051\uffd5\053\uffd5\055\uffd5\061\uffd5" +
    "\063\uffd5\065\uffd5\067\uffd5\071\uffd5\073\uffd5\075\uffd5\077" +
    "\uffd5\100\uffd5\101\uffd5\103\uffd5\105\uffd5\107\uffd5\111\uffd5" +
    "\113\uffd5\115\uffd5\117\uffd5\120\uffd5\001\002\000\070\013" +
    "\uffde\024\uffde\025\uffde\026\uffde\032\uffde\050\uffde\051\uffde" +
    "\053\uffde\055\uffde\061\uffde\063\uffde\065\uffde\067\uffde\071" +
    "\uffde\073\uffde\075\uffde\077\uffde\100\uffde\101\uffde\103\uffde" +
    "\105\uffde\107\uffde\111\uffde\113\uffde\115\uffde\117\uffde\120" +
    "\uffde\001\002\000\066\013\102\024\270\025\252\026\256" +
    "\032\065\050\074\051\061\053\063\055\062\061\060\063" +
    "\052\065\046\067\100\071\105\073\101\075\055\077\261" +
    "\101\111\103\110\105\107\107\106\111\104\113\103\115" +
    "\047\117\262\120\071\001\002\000\070\013\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\032\uffdf\050\uffdf\051\uffdf\053\uffdf\055" +
    "\uffdf\061\uffdf\063\uffdf\065\uffdf\067\uffdf\071\uffdf\073\uffdf" +
    "\075\uffdf\077\uffdf\100\uffdf\101\uffdf\103\uffdf\105\uffdf\107" +
    "\uffdf\111\uffdf\113\uffdf\115\uffdf\117\uffdf\120\uffdf\001\002" +
    "\000\076\013\uffcd\015\uffcd\022\uffcd\023\uffcd\032\uffcd\037" +
    "\uffcd\041\uffcd\050\uffcd\051\uffcd\053\uffcd\055\uffcd\060\uffcd" +
    "\061\uffcd\063\uffcd\065\uffcd\067\uffcd\071\uffcd\073\uffcd\075" +
    "\uffcd\077\uffcd\100\uffcd\101\uffcd\103\uffcd\105\uffcd\107\uffcd" +
    "\111\uffcd\113\uffcd\115\uffcd\117\uffcd\120\uffcd\001\002\000" +
    "\066\013\uffcc\024\uffcc\025\uffcc\026\uffcc\032\uffcc\050\uffcc" +
    "\051\uffcc\053\uffcc\055\uffcc\061\uffcc\063\uffcc\065\uffcc\067" +
    "\uffcc\071\uffcc\073\uffcc\075\uffcc\077\uffcc\101\uffcc\103\uffcc" +
    "\105\uffcc\107\uffcc\111\uffcc\113\uffcc\115\uffcc\117\uffcc\120" +
    "\uffcc\001\002\000\004\100\273\001\002\000\070\013\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\032\uffcf\050\uffcf\051\uffcf\053" +
    "\uffcf\055\uffcf\061\uffcf\063\uffcf\065\uffcf\067\uffcf\071\uffcf" +
    "\073\uffcf\075\uffcf\077\uffcf\100\uffcf\101\uffcf\103\uffcf\105" +
    "\uffcf\107\uffcf\111\uffcf\113\uffcf\115\uffcf\117\uffcf\120\uffcf" +
    "\001\002\000\006\027\302\030\275\001\002\000\004\013" +
    "\277\001\002\000\006\027\uffc6\030\uffc6\001\002\000\004" +
    "\031\300\001\002\000\006\027\uffc5\030\uffc5\001\002\000" +
    "\006\027\uffc7\030\uffc7\001\002\000\066\013\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\032\uffc8\050\uffc8\051\uffc8\053\uffc8\055" +
    "\uffc8\061\uffc8\063\uffc8\065\uffc8\067\uffc8\071\uffc8\073\uffc8" +
    "\075\uffc8\077\uffc8\101\uffc8\103\uffc8\105\uffc8\107\uffc8\111" +
    "\uffc8\113\uffc8\115\uffc8\117\uffc8\120\uffc8\001\002\000\004" +
    "\002\001\001\002\000\064\013\102\015\306\023\044\032" +
    "\065\050\074\051\061\053\063\055\062\061\060\063\052" +
    "\065\046\067\100\071\105\073\101\075\055\077\070\101" +
    "\111\103\110\105\107\107\106\111\104\113\103\115\047" +
    "\117\072\120\071\001\002\000\004\005\ufffc\001\002\000" +
    "\004\005\ufffb\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\011\004\005\007\006\014\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\303\006\055\017" +
    "\044\025\050\033\066\034\072\041\056\044\047\047\074" +
    "\050\053\055\076\056\065\057\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\040\016\036\001\001" +
    "\000\006\010\021\011\017\001\001\000\016\012\026\013" +
    "\030\051\025\052\032\053\031\054\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\033\051\025\052\032" +
    "\053\031\054\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\063\006\055\017\044" +
    "\025\050\033\066\034\072\041\056\044\047\047\074\050" +
    "\053\055\076\056\065\057\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\020\265" +
    "\021\254\022\266\023\263\024\250\025\253\033\257\034" +
    "\262\041\056\044\252\047\074\055\264\056\256\001\001" +
    "\000\002\001\001\000\010\041\056\047\074\056\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\041\056\047\074\056\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\041\056\047\074\056\231\001" +
    "\001\000\016\041\056\042\222\043\224\047\074\055\223" +
    "\056\225\001\001\000\006\035\217\036\205\001\001\000" +
    "\006\035\204\036\205\001\001\000\032\006\201\017\044" +
    "\025\050\033\066\034\072\041\056\044\047\047\074\050" +
    "\053\055\076\056\065\057\052\001\001\000\010\026\155" +
    "\027\153\030\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\006\144\017\044\025\050\033\066\034\072" +
    "\041\056\044\047\047\074\050\053\055\076\056\065\057" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\041\056\047\074\056\142" +
    "\001\001\000\010\041\056\047\074\056\136\001\001\000" +
    "\002\001\001\000\010\041\056\047\074\056\134\001\001" +
    "\000\010\041\056\047\074\056\131\001\001\000\010\041" +
    "\056\047\074\056\126\001\001\000\010\041\056\047\074" +
    "\056\123\001\001\000\010\041\056\047\074\056\120\001" +
    "\001\000\010\041\056\047\074\056\115\001\001\000\010" +
    "\041\056\047\074\056\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\177\027\153" +
    "\030\154\001\001\000\002\001\001\000\010\026\175\027" +
    "\153\030\154\001\001\000\010\026\173\027\153\030\154" +
    "\001\001\000\006\031\161\032\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\157\030\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\171\017" +
    "\044\025\050\033\066\034\072\041\056\044\047\047\074" +
    "\050\053\055\076\056\065\057\052\001\001\000\004\032" +
    "\170\001\001\000\002\001\001\000\032\006\165\017\044" +
    "\025\050\033\066\034\072\041\056\044\047\047\074\050" +
    "\053\055\076\056\065\057\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\157\030\154\001\001\000\002\001\001\000\006\027" +
    "\157\030\154\001\001\000\002\001\001\000\006\027\157" +
    "\030\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\017\044\025\050\033\066\034\072" +
    "\041\056\044\047\045\213\046\210\047\074\050\053\056" +
    "\214\057\211\001\001\000\004\036\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\017\044" +
    "\025\050\033\066\034\072\041\056\044\047\046\215\047" +
    "\074\050\053\056\214\057\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\041\056" +
    "\043\227\047\074\055\223\056\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\273\040\275\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\022\266\023\263\024\271\025\253\033\257\034" +
    "\262\041\056\044\252\047\074\055\264\056\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\021\270\022\266\023\263\024\250" +
    "\025\253\033\257\034\262\041\056\044\252\047\074\055" +
    "\264\056\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\006\201\017\044" +
    "\025\050\033\066\034\072\041\056\044\047\047\074\050" +
    "\053\055\076\056\065\057\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void report_error(String message, Object info) {
   
     
        StringBuffer m = new StringBuffer("Error");
   
        
        if (info instanceof java_cup.runtime.Symbol) {
            
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            
            if (s.left >= 0) {                
                
                m.append(" in line " + (s.left + 1));
               
                if (s.right >= 0)                    
                    
                    m.append(", column " + (s.right + 1));
            }
        }

        m.append(" : " + message);

        System.err.println(m);
    }
   
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final Html4Parser parser;

  /** Constructor */
  CUP$parser$actions(Html4Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // html_tag ::= HTML html_content EHTML 
            {
              documentNode =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   Node open = new Node(h, c);
                   Node close = new Node(e, null);

                   Vector v = new Vector();

                   v.addElement(open);
                   v.addElement(close);

                   documentNode = new Node("document", v);
                   //documentNode.resultPrinter();
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("html_tag",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= html_tag EOF 
            {
              Object documentNode =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		documentNode = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // html_content ::= body_tag 
            {
              Vector documentNode =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector b = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     documentNode = b;

                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("html_content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // html_content ::= frameset_tag 
            {
              Vector documentNode =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      documentNode = f;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("html_content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // html_content ::= head_tag 
            {
              Vector documentNode =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector h = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      documentNode = h;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("html_content",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body_tag ::= BODY EBODY 
            {
              Vector documentNode =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     Node open = new Node(b, null);
                     Node close = new Node(e, null);

                     Vector v = new Vector();

                     v.addElement(open);
                     v.addElement(close);

                     documentNode = v;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_tag",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body_tag ::= BODY body_contents EBODY 
            {
              Vector documentNode =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Node open = new Node(b, bc);
                        Node close = new Node(e, null);

                        Vector v = new Vector();

                        v.addElement(open);
                        v.addElement(close);

                        documentNode = v;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_tag",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // frameset_tag ::= FRAMESET frameset_contents EFRAMESET 
            {
              Vector documentNode =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Node open = new Node(f, c);
                        Node close = new Node(e, null);

                        Vector v = new Vector();

                        v.addElement(open);
                        v.addElement(close);

                        documentNode = v;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("frameset_tag",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // frameset_tag ::= FRAMESET EFRAMESET 
            {
              Vector documentNode =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Node open = new Node(f, null);
                        Node close = new Node(e, null);

                        Vector v = new Vector();

                        v.addElement(open);
                        v.addElement(close);

                        documentNode = v;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("frameset_tag",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // frameset_contents ::= frameset_contents frameset_content 
            {
              Vector documentNode =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector fs = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Enumeration e = f.elements();

							while (e.hasMoreElements())
								fs.addElement((Node) e.nextElement());

							documentNode = fs;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("frameset_contents",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // frameset_contents ::= frameset_content 
            {
              Vector documentNode =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           documentNode = f;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("frameset_contents",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // frameset_content ::= FRAME 
            {
              Vector documentNode =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         Node open = new Node(f, null);

                         Vector v = new Vector();
                         v.addElement(open);

						 documentNode = v;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("frameset_content",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // frameset_content ::= NOFRAMES ENOFRAMES 
            {
              Vector documentNode =null;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								 Node open = new Node(nf, null);
								 Node close = new Node(e, null);
								 
								 Vector v = new Vector();
								 
								 v.addElement(open);
								 v.addElement(close);
								 
								 documentNode = v;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("frameset_content",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // frameset_content ::= NOFRAMES body_contents ENOFRAMES 
            {
              Vector documentNode =null;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Node open = new Node(nf, bc);
									Node close = new Node(e, null);
									
									Vector v = new Vector();
									
									v.addElement(open);
									v.addElement(close);
									
									documentNode = v;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("frameset_content",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // body_contents ::= body_contents body_content 
            {
              Vector documentNode =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector cs = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            Enumeration e = c.elements();
														
							while (e.hasMoreElements())
								cs.addElement((Node) e.nextElement());

							documentNode = cs;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_contents",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // body_contents ::= body_content 
            {
              Vector documentNode =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           documentNode = c;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_contents",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // body_content ::= block 
            {
              Vector documentNode =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector b = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         documentNode = b;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_content",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // body_content ::= heading 
            {
              Vector documentNode =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector h = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         documentNode = h;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_content",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // body_content ::= text 
            {
              Vector documentNode =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector t = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         documentNode = t;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_content",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // body_content ::= HR 
            {
              Vector documentNode =null;
		int hrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String hr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         Node open = new Node(hr, null);
                        
 						 Vector v = new Vector();
                         v.addElement(open);
												 
                         documentNode = v;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_content",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // head_tag ::= HEAD head_contents EHEAD 
            {
              Vector documentNode =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Node open = new Node(h, c);
                        Node close = new Node(e, null);

                        Vector v = new Vector();

                        v.addElement(open);
                        v.addElement(close);

                        documentNode = v;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("head_tag",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // head_tag ::= HEAD EHEAD 
            {
              Vector documentNode =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Node open = new Node(h, null);
                        Node close = new Node(e, null);

                        Vector v = new Vector();

                        v.addElement(open);
                        v.addElement(close);

                        documentNode = v;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("head_tag",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // head_contents ::= head_contents head_content 
            {
              Vector documentNode =null;
		int hsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector hs = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector h = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Enumeration e = h.elements();

							while (e.hasMoreElements())
								hs.addElement((Node) e.nextElement());

							documentNode = hs;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("head_contents",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // head_contents ::= head_content 
            {
              Vector documentNode =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector h = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           documentNode = h;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("head_contents",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // head_content ::= HEAD 
            {
              Vector documentNode =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         Node open = new Node(h, null);

                         Vector v = new Vector();
                         v.addElement(open);

						 documentNode = v;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("head_content",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // head_content ::= TITLE ETITLE 
            {
              Vector documentNode =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           Node open = new Node(t, null);
                           Node close = new Node(e, null);

                           Vector v = new Vector();

                           v.addElement(open);
                           v.addElement(close);

                           documentNode = v;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("head_content",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // head_content ::= LINK 
            {
              Vector documentNode =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          Node open = new Node(l, null);

                          Vector v = new Vector();
                          v.addElement(open);

                          documentNode = v;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("head_content",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // head_content ::= LINK link_contents 
            {
              Vector documentNode =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Node open = new Node(l, c);

                            Vector v = new Vector();
                            v.addElement(open);

                            documentNode = v;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("head_content",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // link_contents ::= link_contents link_content 
            {
              Vector documentNode =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector ls = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            Enumeration e = l.elements();
														
							while (e.hasMoreElements())
								ls.addElement((Node) e.nextElement());

							documentNode = ls;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link_contents",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // link_contents ::= link_content 
            {
              Vector documentNode =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector l = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           documentNode = l;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link_contents",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // link_content ::= media 
            {
              Vector documentNode =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector m = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         documentNode = m;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link_content",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // link_content ::= rel 
            {
              Vector documentNode =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector r = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         documentNode = r;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link_content",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // link_content ::= type 
            {
              Vector documentNode =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector t = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         documentNode = t;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link_content",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // link_content ::= href 
            {
              Vector documentNode =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector h = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         documentNode = h;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link_content",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // form_body_content ::= form_block 
            {
              Vector documentNode =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector b = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         documentNode = b;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_body_content",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // form_body_content ::= heading 
            {
              Vector documentNode =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector h = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            documentNode = h;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_body_content",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // form_body_content ::= text 
            {
              Vector documentNode =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector t = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            documentNode = t;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_body_content",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // form_body_content ::= HR 
            {
              Vector documentNode = null;
		int hrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String hr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Node open = new Node(hr, null);
														
                            Vector v = new Vector();
                            v.addElement(open);
														
                            documentNode = v;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_body_content",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // block ::= center_tag 
            {
              Vector documentNode =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector ct = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            documentNode = ct;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // block ::= form_tag 
            {
              Vector documentNode =null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector ft = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            documentNode = ft;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // block ::= ol_tag 
            {
              Vector documentNode =null;
		int otleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector ot = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            documentNode = ot;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // block ::= p_tag 
            {
              Vector documentNode =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector pt = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            documentNode = pt;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // block ::= table_tag 
            {
              Vector documentNode =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector tt = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            documentNode = tt;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // block ::= ul_tag 
            {
              Vector documentNode =null;
		int utleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int utright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector ut = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            documentNode = ut;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // form_block ::= form_center_tag 
            {
              Vector documentNode =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector fct = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            documentNode = fct;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // form_block ::= ol_tag 
            {
              Vector documentNode =null;
		int otleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int otright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector ot = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              documentNode = ot;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // form_block ::= p_tag 
            {
              Vector documentNode =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector pt = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              documentNode = pt;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // form_block ::= table_tag 
            {
              Vector documentNode =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector tt = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              documentNode = tt;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // form_block ::= ul_tag 
            {
              Vector documentNode =null;
		int utleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int utright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector ut = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              documentNode = ut;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_block",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // center_tag ::= CENTER body_content ECENTER 
            {
              Vector documentNode =null;
		int ctrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ctrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ctr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Node open = new Node(ctr, c);
                            Node close = new Node(e, null);
														
                            Vector v = new Vector();
														
                            v.addElement(open);
                            v.addElement(close);
														
                            documentNode = v;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("center_tag",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // form_center_tag ::= CENTER form_body_content ECENTER 
            {
              Vector documentNode =null;
		int ctrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ctrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ctr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector fc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Node open = new Node(ctr, fc);
                            Node close = new Node(e, null);
														
                            Vector v = new Vector();
														
                            v.addElement(open);
                            v.addElement(close);
														
                            documentNode = v;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_center_tag",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // form_tag ::= FORM EFORM 
            {
              Vector documentNode =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          Node open = new Node(f, null);
                          Node close = new Node(e, null);
													
                          Vector v = new Vector();
													
                          v.addElement(open);
                          v.addElement(close);
													
                          documentNode = v;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_tag",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // form_tag ::= FORM form_contents EFORM 
            {
              Vector documentNode =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          Node open = new Node(f, c);
                          Node close = new Node(e, null);
													
                          Vector v = new Vector();
													
                          v.addElement(open);
                          v.addElement(close);
													
                          documentNode = v;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_tag",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // form_contents ::= form_contents form_content 
            {
              Vector documentNode =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector cs = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            Enumeration e = c.elements();
		                        
							while (e.hasMoreElements())
	      	                    cs.addElement((Node) e.nextElement()); 
														
                            documentNode = cs;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_contents",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // form_contents ::= form_content 
            {
              Vector documentNode =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           documentNode = c;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_contents",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // form_content ::= INPUT 
            {
              Vector documentNode =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          Node open = new Node(c, null);
													
                          Vector v = new Vector();
                          v.addElement(open);
													
                          documentNode = v;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_content",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // form_content ::= form_body_content 
            {
              Vector documentNode =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector bc = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            documentNode = bc;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_content",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // form_content ::= SELECT options ESELECT 
            {
              Vector documentNode =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector os = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node open = new Node(f, os);
                              Node close = new Node(e, null);
															
                              Vector v = new Vector();
															
                              v.addElement(open);
                              v.addElement(close);
                             
 							  documentNode = v;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_content",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // options ::= options option 
            {
              Vector documentNode =null;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector os = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector o = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            Enumeration e = o.elements();
		                        
							while (e.hasMoreElements())
	      	                    os.addElement((Node) e.nextElement()); 
														
                            documentNode = os;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("options",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // options ::= option 
            {
              Vector documentNode =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector o = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           documentNode = o;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("options",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // option ::= OPTION TEXT EOPTION 
            {
              Vector documentNode =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node text_open = new Node(t, null);
                              
							  Vector v = new Vector();
                              v.addElement(text_open);
															
                              Node open = new Node(o, v);
                              Node close = new Node(e, null);
															
                              Vector final_vect = new Vector();
															
                              final_vect.addElement(open);
                              final_vect.addElement(close);
															
                              documentNode = final_vect;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("option",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ol_tag ::= OL li_tags EOL 
            {
              Vector documentNode =null;
		int olleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ol = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector li = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node open = new Node(ol, li);
                              Node close = new Node(e, null);
															
                              Vector v = new Vector();
															
                              v.addElement(open);
                              v.addElement(close);
															
                              documentNode = v;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ol_tag",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ul_tag ::= UL li_tags EUL 
            {
              Vector documentNode =null;
		int ulleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ulright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ul = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector li = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Node open = new Node(ul, li);
                            Node close = new Node(e, null);
														
                            Vector v = new Vector();
														
                            v.addElement(open);
                            v.addElement(close);
														
                            documentNode = v;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ul_tag",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // li_tags ::= li_tags li_tag 
            {
              Vector documentNode =null;
		int lisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector lis = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector li = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            Enumeration e = li.elements();
														
		                     while (e.hasMoreElements())
	      	                   lis.addElement((Node) e.nextElement());
														
                            documentNode = lis;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("li_tags",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // li_tags ::= li_tag 
            {
              Vector documentNode =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector li = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            documentNode = li;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("li_tags",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // li_tag ::= LI flows ELI 
            {
              Vector documentNode =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String li = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector fl = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node open = new Node(li, fl);
                              Node close = new Node(e, null);
															
                              Vector v = new Vector();
															
                              v.addElement(open);
                              v.addElement(close);
															
                              documentNode = v;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("li_tag",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // li_tag ::= LI ELI 
            {
              Vector documentNode =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String li = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                Node open = new Node(li, null);
                                Node close = new Node(e, null);
																
                                Vector v = new Vector();
																
                                v.addElement(open);
                                v.addElement(close);
																
                                documentNode = v;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("li_tag",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // flows ::= flows flow 
            {
              Vector documentNode =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector fs = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            Enumeration e = f.elements();
		                        
							while (e.hasMoreElements())
	      	                   fs.addElement((Node) e.nextElement());
														
                            documentNode = fs;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flows",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // flows ::= flow 
            {
              Vector documentNode =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector f = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              documentNode = f;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flows",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // flow ::= block 
            {
              Vector documentNode =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector b = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           documentNode = b;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // flow ::= text 
            {
              Vector documentNode =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector t = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           documentNode = t;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // text ::= BR 
            {
              Vector documentNode =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int brright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String br = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node open = new Node(br, null);
															
                              Vector v = new Vector();
                              v.addElement(open);
															
                              documentNode = v;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // text ::= IMG 
            {
              Vector documentNode =null;
		int imgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int imgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String img = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node open = new Node(img, null);
															
                              Vector v = new Vector();
                              v.addElement(open);
															
                              documentNode = v;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // text ::= a_tag 
            {
              Vector documentNode =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector a = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              documentNode = a;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // text ::= TEXT 
            {
              Vector documentNode =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node open = new Node(t, null);
															
                              Vector v = new Vector();
                              v.addElement(open);
															
                              documentNode = v;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // text ::= physical_style 
            {
              Vector documentNode =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector ps = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              documentNode = ps;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("text",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // a_tag ::= A a_contents EA 
            {
              Vector documentNode =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node open = new Node(a, c);
                              Node close = new Node(e, null);
															
                              Vector v = new Vector();
															
                              v.addElement(open);
                              v.addElement(close);
															
                              documentNode = v;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_tag",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // a_tag ::= A EA 
            {
              Vector documentNode =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node open = new Node(a, null);
                              Node close = new Node(e, null);
															
                              Vector v = new Vector();
															
                              v.addElement(open);
                              v.addElement(close);
															
                              documentNode = v;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_tag",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // a_contents ::= a_contents a_content 
            {
              Vector documentNode =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector as = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector a = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            Enumeration e = a.elements();
		                        
							while (e.hasMoreElements())
	      	                   as.addElement((Node) e.nextElement());
													 
                            documentNode = as;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_contents",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // a_contents ::= a_content 
            {
              Vector documentNode =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector a = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             documentNode = a;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_contents",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // a_content ::= heading 
            {
              Vector documentNode =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector h = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             documentNode = h;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_content",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // a_content ::= text 
            {
              Vector documentNode =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector t = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             documentNode = t;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a_content",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // heading ::= H1 text EH1 
            {
              Vector documentNode =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector text = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node open = new Node(h1, text);
                               Node close = new Node(e, null);
															 
                               Vector v = new Vector();
															 
                               v.addElement(open);
                               v.addElement(close);
															 
                               documentNode = v;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // heading ::= H1 EH1 
            {
              Vector documentNode =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(h1, null);
                                 Node close = new Node(e, null);
													  		 
                                 Vector v = new Vector();
													  		 
                                 v.addElement(open);
                                 v.addElement(close);
													  		 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // heading ::= H2 text EH2 
            {
              Vector documentNode =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector text = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(h2, text);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // heading ::= H2 EH2 
            {
              Vector documentNode =null;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(h2, null);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // heading ::= H3 text EH3 
            {
              Vector documentNode =null;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector text = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(h3, text);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // heading ::= H3 EH3 
            {
              Vector documentNode =null;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(h3, null);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // heading ::= H4 text EH4 
            {
              Vector documentNode =null;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector text = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(h4, text);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // heading ::= H4 EH4 
            {
              Vector documentNode =null;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(h4, null);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // heading ::= H5 text EH5 
            {
              Vector documentNode =null;
		int h5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector text = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(h5, text);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // heading ::= H5 EH5 
            {
              Vector documentNode =null;
		int h5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(h5, null);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // heading ::= H6 text EH6 
            {
              Vector documentNode =null;
		int h6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector text = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(h6, text);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // heading ::= H6 EH6 
            {
              Vector documentNode =null;
		int h6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(h6, null);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("heading",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // physical_style ::= B text EB 
            {
              Vector documentNode =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector text = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					   		    Node open = new Node(b, text);
					   		    Node close = new Node(e, null);

					   		    Vector v = new Vector();

					   		    v.addElement(open);
					   		    v.addElement(close);

					   		    documentNode = v;
						   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // physical_style ::= B EB 
            {
              Vector documentNode =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(b, null);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // physical_style ::= I text EI 
            {
              Vector documentNode =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector text = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(i, text);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // physical_style ::= I EI 
            {
              Vector documentNode =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(i, null);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // physical_style ::= U text EU 
            {
              Vector documentNode =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector text = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(u, text);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // physical_style ::= U EU 
            {
              Vector documentNode =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(u, null);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // physical_style ::= SMALL text ESMALL 
            {
              Vector documentNode =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector text = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(s, text);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // physical_style ::= SMALL ESMALL 
            {
              Vector documentNode =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(s, null);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // physical_style ::= SUP text ESUP 
            {
              Vector documentNode =null;
		int supleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int supright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sup = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector text = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(sup, text);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // physical_style ::= SUP ESUP 
            {
              Vector documentNode =null;
		int supleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int supright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sup = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(sup, null);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // physical_style ::= SUB text ESUB 
            {
              Vector documentNode =null;
		int subleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int subright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sub = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector text = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(sub, text);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // physical_style ::= SUB ESUB 
            {
              Vector documentNode =null;
		int subleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int subright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sub = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(sub, null);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // physical_style ::= FONT TEXT EFONT 
            {
              Vector documentNode =null;
		int fontleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fontright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String font = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                 Node text_node = new Node(text, null);
																 
                                 Vector text_vector = new Vector();
                                 text_vector.addElement(text_node); 
																 
                                 Node open = new Node(font, text_vector);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // physical_style ::= FONT EFONT 
            {
              Vector documentNode =null;
		int fontleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fontright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String font = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                 Node open = new Node(font, null);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("physical_style",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // p_tag ::= P TEXT EP 
            {
              Vector documentNode =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                               Node text_node = new Node(text, null);
															 
                               Vector text_vector = new Vector();
                               text_vector.addElement(text_node); 
															 
                               Node open = new Node(p, text_vector);
                               Node close = new Node(e, null);
															 
                               Vector v = new Vector();
															 
                               v.addElement(open);
                               v.addElement(close);
															 
                               documentNode = v;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_tag",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // p_tag ::= P EP 
            {
              Vector documentNode =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                Node open = new Node(p, null);
                                Node close = new Node(e, null);
																
                                Vector v = new Vector();
																
                                v.addElement(open);
                                v.addElement(close);
																
                                documentNode = v;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_tag",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // table_tag ::= TABLE table_contents ETABLE 
            {
              Vector documentNode =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node open = new Node(t, c);
                               Node close = new Node(e, null);
															 
                               Vector v = new Vector();
															 
                               v.addElement(open);
                               v.addElement(close);
															 
                               documentNode = v;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_tag",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // table_tag ::= TABLE ETABLE 
            {
              Vector documentNode =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 Node open = new Node(t, null);
                                 Node close = new Node(e, null);
																 
                                 Vector v = new Vector();
																 
                                 v.addElement(open);
                                 v.addElement(close);
																 
                                 documentNode = v;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_tag",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // table_contents ::= table_contents table_content 
            {
              Vector documentNode =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector cs = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                              Enumeration e = c.elements();
		                         
 							  while (e.hasMoreElements())
	      	                     cs.addElement((Node) e.nextElement());
                              
							  documentNode = cs;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_contents",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // table_contents ::= table_content 
            {
              Vector documentNode =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                documentNode = c;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_contents",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // table_content ::= TBODY table_contents ETBODY 
            {
              Vector documentNode =null;
		int tbodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tbodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tbody = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node open = new Node(tbody, null);
                               Node close = new Node(e, null);
															 
                               Vector v = new Vector();
															 
                               v.addElement(open);
                               v.addElement(close);
															 
                               documentNode = v;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_content",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // table_content ::= THEAD table_contents ETHEAD 
            {
              Vector documentNode =null;
		int theadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int theadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String thead = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node open = new Node(thead, null);
                               Node close = new Node(e, null);
															 
                               Vector v = new Vector();
															 
                               v.addElement(open);
															 v.addElement(close);
															 
                               documentNode = v;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_content",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // table_content ::= TFOOT table_contents ETFOOT 
            {
              Vector documentNode =null;
		int tfootleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tfootright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tfoot = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              Node open = new Node(tfoot, null);
                              Node close = new Node(e, null);

                              Vector v = new Vector();

                              v.addElement(open);
						 								 v.addElement(close);

                              documentNode = v;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_content",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // table_content ::= tr_tag 
            {
              Vector documentNode =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector tr = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                documentNode = tr;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_content",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tr_tag ::= TR table_cells ETR 
            {
              Vector documentNode =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cellsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cellsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector cells = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node open = new Node(tr, cells);
                               Node close = new Node(e, null);
															 
                               Vector v = new Vector();
															 
                               v.addElement(open);
                               v.addElement(close);
															 
                               documentNode = v;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr_tag",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tr_tag ::= TR ETR 
            {
              Vector documentNode =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node open = new Node(tr, null);
                               Node close = new Node(e, null);
															 
                               Vector v = new Vector();
															 
                               v.addElement(open);
                               v.addElement(close);
															 
                               documentNode = v;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tr_tag",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // table_cells ::= table_cells table_cell 
            {
              Vector documentNode =null;
		int cellsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cellsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector cells = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cellleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cellright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector cell = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                              Enumeration e = cell.elements();
		                          
							  while (e.hasMoreElements())
	      	                     cells.addElement((Node) e.nextElement());
                              
							  documentNode = cells;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_cells",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // table_cells ::= table_cell 
            {
              Vector documentNode =null;
		int cellleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cellright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector cell = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              documentNode = cell;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_cells",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // table_cell ::= TD body_content ETD 
            {
              Vector documentNode =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node open = new Node(td, c);
                               Node close = new Node(e, null);
															 
                               Vector v = new Vector();
															 
                               v.addElement(open);
                               v.addElement(close);
															 
                               documentNode = v;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_cell",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // table_cell ::= TH body_content ETH 
            {
              Vector documentNode =null;
		int thleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int thright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String th = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector c = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                               Node open = new Node(th, c);
                               Node close = new Node(e, null);
															 
                               Vector v = new Vector();
															 
                               v.addElement(open);
                               v.addElement(close);
															 
                               documentNode = v;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_cell",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), documentNode);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
